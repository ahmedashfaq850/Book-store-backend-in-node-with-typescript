step 1
npm init 

step 2
Install Dev Dependencies for Project 
npm install -D typescript nodemon ts-node @types/node

step 3
Configure Typescript 
npx tsc --initstep

step 4 
Add dev Script in package.json file Under Scripts object
"dev": "nodemon server.ts"

step 5 
To run Server 
npm run dev

step 6
Setup Eslint
npm init @eslint/config@latest

step 7 
Add gitIgnore file through Shift+Command+P (AddgitIgnore)

step 8 
Setup text formatting Prettier
type command and , and tick the formatting on save checkbox

step 9
install Express Dependency
npm i express or npm install express --legacy-peer-deps
npm i -D @types/express --legacy-peer-deps

step 10
add dotenv package

step 11 
create a express instance in app.ts file  
import express from 'express'
const app = express()
export default app


now call the app in server.ts and run the server
import app from './src/app'

const startServer = () => {
  const port = process.env.PORT || 3000

  app.listen(port, () => {
    console.log('Server is running on port', port)
  })
}

startServer()


step 12
Configuration file setup
import {config as dotenvConfig} from 'dotenv'
dotenvConfig()

// config is already defined in the global scope, so we can't use it as a variable name
const _config = {
    port: process.env.PORT || 3000,
}
export const config = Object.freeze(_config) // freeze the object to prevent modification


This is how we use config object in server.ts file 
import app from './src/app'
import { config } from './src/config/config'

const startServer = () => {
  const port = config.port || 3000

  app.listen(port, () => {
    console.log('Server is running on port', port)
  })
}

startServer()

step 13 
npm install dotenv --force (To ignore conflict with dependencies)
pm i -D @types/dotenv --force
create .env file in root 


step 14
setup Mongo DB
npm i mongoose
npm i -D mongoose
Now create a db.ts file in config folder


step 15 
create an Global Handler for error handling
npm i http-errors
npm i -D @types/http-errors

step 16
Now use this Global Handler Error middleware in the app.ts file
app.use(globalErrorHandler)

step 17 
to user this global error
  const error = createHttpError(500, 'Internal new Server Error')
  throw error

step 18
now follow the folder structure that create a folder for an endpoint and write that endpoint (router file, controller file, model file, type safety file in that folder)
